generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique @db.VarChar(255)
  logo_url    String?
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime  @default(now()) @db.Timestamptz(6)
  is_approved Boolean   @default(false)
  reviews     Review[]

  @@map("companies")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Review {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  company_id       String    @db.Uuid
  rating           Int       @db.SmallInt
  role_applied_for String    @db.VarChar(255)
  experience_text  String
  was_ghosted      Boolean?  @default(false)
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  updated_at       DateTime  @default(now()) @db.Timestamptz(6)
  companies        Company @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users            User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, company_id], map: "one_review_per_user_per_company")
  @@map("reviews")
}

model User {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username           String    @unique @db.VarChar(50)
  email              String    @unique @db.VarChar(255)
  password_hash      String    @db.VarChar(255)
  created_at         DateTime  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime  @default(now()) @db.Timestamptz(6)
  role               String    @default("user") @db.VarChar(20)
  refresh_token_hash String?   @db.VarChar(255)
  reviews            Review[]

  @@map("users")
}
